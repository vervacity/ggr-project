#!/usr/bin/env python

"""Runs GGR analysis
"""

import os
import sys
import logging
import subprocess
import argparse
import glob
import pkg_resources
import json


def parse_args():
    """Set up arguments
    """
    parser = argparse.ArgumentParser(
        description='Run GGR analysis')
    parser.add_argument(
        "-o", "--out_dir", dest="out_dir", type=str, default=os.getcwd(),
        help = "Output directory (default: current dir)")
    load_data_files(parser)
    
    args = parser.parse_args()
    
    return args


def load_data_files(parser):
    """Load all json files in so that we have handles on all data
    """
    logging.info("Loading jsons...")
    json_files = glob.glob(
        pkg_resources.resource_filename('ggr', 'data/*.json'))
    data_files = {}
    
    for json_file in json_files:
        key_name = os.path.basename(json_file).split('.json')[0]
        logging.info(json_file)
        with open(json_file, 'r') as fp:
            parser.add_argument(
                "--{}".format(key_name),
                type=dict, default=json.load(fp),
                help="Support data files")
    return


def setup_folders(args):
    """Just make all the folders up front 
    so that don't have to worry about it
    """
    for folder_key in args.folders.keys():
        full_folder_path = "{0}/{1}".format(
            args.out_dir, args.folders[folder_key])
        args.folders[folder_key] = full_folder_path
        os.system("mkdir -p {0}".format(
            full_folder_path))
        
    return None


def track_runs(args):
    """track command and github commit
    """
    logging_file = "{}/ggr-project.log".format(args.out_dir)
    
    # track github commit
    git_repo_path = os.path.dirname(os.path.realpath(__file__))
    os.system('echo "commit:" > {0}'.format(logging_file))
    os.system('git -C {0} rev-parse HEAD >> {1}'.format(
        git_repo_path, logging_file))
    os.system('echo "" >> {0}'.format(logging_file))
    
    # write out the command
    with open(logging_file, 'a') as f:
        f.write(' '.join(sys.argv)+'\n\n')
        
    return logging_file


def main():
    """Run all code
    """
    
    # setup
    args = parse_args()
    os.system("mkdir -p {}".format(args.out_dir))
    logging_file = track_runs(args)
    setup_folders(args)
    logging.basicConfig(filename=logging_file, level=logging.INFO)
    
    # setup annotations
    from ggr.annotations import run
    args = run(args)

    # run atac analyses
    from ggr.atac_analysis import run
    args = run(args)

    # run histone analyses
    from ggr.histone_analysis import run
    #args = run(args)
    

    # run integrative analyses
    # this is approx fig 2


    

    # deep learning: tronn
    
    
    
    


    return None



if __name__ == '__main__':
        main()
